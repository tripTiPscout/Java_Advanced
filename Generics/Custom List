package Advanced;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        CustomList<String> customList = new CustomList<>();

        String inputLine = scanner.nextLine();

        while (!inputLine.equals("END")) {
            String[] inputTokens = inputLine.split("\\s+");
            String command = inputTokens[0];

            switch (command) {
                case "Add":
                    String element = inputTokens[1];
                    customList.add(element);
                    break;
                case "Remove":
                    element = inputTokens[1];
                    int index = Integer.parseInt(element);
                    customList.remove(index);
                    break;
                case "Contains":
                    element = inputTokens[1];
                    System.out.println(customList.contains(element));
                    break;
                case "Swap":
                    element = inputTokens[1];
                    String secondElement = inputTokens[2];
                    int firstIndex = Integer.parseInt(element);
                    int secondIndex = Integer.parseInt(secondElement);
                    customList.swap(firstIndex, secondIndex);
                    break;
                case "Greater":
                    element = inputTokens[1];
                    System.out.println(customList.countGreaterThan(element));
                    break;
                case "Min":
                    System.out.println(customList.getMin());
                    break;
                case "Max":
                    System.out.println(customList.getMax());
                    break;
                case "Print":
                    System.out.println(customList);
                    break;
                case "Sort":
                    Sorter.sort(customList);
                    break;
            }
            inputLine = scanner.nextLine();
        }
    }

}

class CustomList<T extends Comparable<T>> implements Iterable<T> {

    private final List<T> values;

    public CustomList() {
        this.values = new ArrayList<>();
    }

    public void add(T element) {
        this.values.add(element);
    }

    public void remove(int index) {
        this.values.remove(index);
    }

    public boolean contains(T element) {
        return this.values.contains(element);
    }

    public void swap(int indexOne, int indexTwo) {
        T firstElement = this.values.get(indexOne);
        this.values.set(indexOne, this.values.get(indexTwo));
        this.values.set(indexTwo, firstElement);
    }

    public long countGreaterThan(T element) {
        return this.values.stream().filter(e -> e.compareTo(element) > 0).count();
    }

    public T getMax() {
        T maxElement = this.values.get(0);
        for (T value : values) {
            if (value.compareTo(maxElement) > 0) {
                maxElement = value;
            }
        }
        return maxElement;
    }

    public T getMin() {
        T minElement = this.values.get(0);
        for (T value : values) {
            if (value.compareTo(minElement) < 0) {
                minElement = value;
            }
        }
        return minElement;
    }

    public int size() {
        return this.values.size();
    }

    public T get(int index) {
        return values.get(index);
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        for (T value : this.values) {
            builder.append(value.toString())
                    .append(System.lineSeparator());
        }
        return builder.toString().trim();
    }

    @Override
    public Iterator<T> iterator() {
        return new Iterator<>() {
            private int index = 0;

            @Override
            public boolean hasNext() {
                return index < values.size();
            }

            @Override
            public T next() {
                return values.get(index++);
            }
        };
    }
}

class Sorter {
    public static <T extends Comparable<T>> void sort(CustomList<T> list) {
        for (int i = 0; i < list.size(); i++) {
            T currentElement = list.get(i);
            for (int j = i + 1; j < list.size(); j++) {
                if (currentElement.compareTo(list.get(j)) > 0) {
                    list.swap(i, j);
                }
            }
        }
    }
}
