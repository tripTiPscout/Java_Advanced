package Advanced;
 
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
 
public class DragonArmy {
 
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int lines = Integer.parseInt(scanner.nextLine());

        Map<String, Map<String, int[]>> dragonsByColors = new LinkedHashMap<>();

        readInputDragonsData(scanner, lines, dragonsByColors);

        getAverageDragonStats(dragonsByColors);
    }

    private static void readInputDragonsData(Scanner scanner, int lines, Map<String, Map<String, int[]>> dragonsByColors) {
        for (int i = 1; i <= lines; i++) {
            String[] dragonData = scanner.nextLine().split("\\s+");

            String type = dragonData[0];
            String name = dragonData[1];
            int damage = dragonData[2].equals("null") ? 45 : Integer.parseInt(dragonData[2]);
            int health = dragonData[3].equals("null") ? 250 : Integer.parseInt(dragonData[3]);
            int armor = dragonData[4].equals("null") ? 10 : Integer.parseInt(dragonData[4]);

            Map<String, int[]> dragonNameAndStats = new TreeMap<>();
            int[] stats = new int[3];
            stats[0] = damage;
            stats[1] = health;
            stats[2] = armor;
            dragonNameAndStats.put(name, stats);

            if (!dragonsByColors.containsKey(type)) {
                dragonsByColors.put(type, dragonNameAndStats);
            } else {
                dragonsByColors.get(type).remove(name);
                dragonsByColors.get(type).put(name, stats);
            }
        }
    }

    private static void getAverageDragonStats(Map<String, Map<String, int[]>> dragonsByColors) {
        dragonsByColors.forEach((color, dragons) -> {
            double damageAvg = 0;
            double healthAvg = 0;
            double armorAvg = 0;
            for (int[] stats : dragons.values()) {
                damageAvg += stats[0];
                healthAvg += stats[1];
                armorAvg += stats[2];
            }

            int dragonsCountByColor = dragons.size();
            damageAvg /= dragonsCountByColor;
            healthAvg /= dragonsCountByColor;
            armorAvg /= dragonsCountByColor;

            printDragonStats(dragonsByColors, color, damageAvg, healthAvg, armorAvg);
        });
    }

    private static void printDragonStats(Map<String, Map<String, int[]>> dragons, String color, double damageAvg, double healthAvg, double armorAvg) {
        System.out.printf("%s::(%.2f/%.2f/%.2f)\n", color, damageAvg, healthAvg, armorAvg);
        dragons.get(color).forEach((name, stats) -> System.out.printf("-%s -> damage: %d, health: %d, armor: %d\n", name, stats[0], stats[1], stats[2]));
    }

}
